// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017.subsystems;

import org.usfirst.frc4089.StealthM2017.Constants;
import org.usfirst.frc4089.StealthM2017.RobotMap;
import org.usfirst.frc4089.StealthM2017.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;


import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

   
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder encoderShoot = RobotMap.shooterEncoderShoot;
    private final Servo servoLowGoal = RobotMap.shooterServoLowGoal;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon motorShoot = RobotMap.shooterMotorShoot;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
   
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    //controls the motor direction
    public void dynSpinShoot(double speed){
    	motorShoot.set(speed);
    }
    public void dynSpinBack(double speed){
    	motorShoot.set(-speed);
    }
    public void dynSpinFW(double speed){
    	motorShoot.set(speed);
    }
    public double getLowGoalAng(){
    	double angle = servoLowGoal.getAngle();
    	return angle;
    }
    public void openLowGoal(){
    	servoLowGoal.setPosition(Constants.maxLowGoalServoPos);
    }
    public void closeLowGoal(){
    	servoLowGoal.setPosition(Constants.minLowGoalServoPos);
    }
    public void lowGoalActuate(){
    	if (servoLowGoal.get() >=0.25){
    		servoLowGoal.setPosition(Constants.maxLowGoalServoPos);
    	}else{
    		servoLowGoal.setPosition(Constants.minLowGoalServoPos);
    	}
    }
    
}

