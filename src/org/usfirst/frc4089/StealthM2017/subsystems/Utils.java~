// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017.subsystems;


import org.usfirst.frc4089.StealthM2017.Constants;
import org.usfirst.frc4089.StealthM2017.RobotMap;
import org.usfirst.frc4089.StealthM2017.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Utils extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder encoderDrive1 = RobotMap.utilsEncoderDrive1;
    private final Encoder encoderDrive2 = RobotMap.utilsEncoderDrive2;
    private final PowerDistributionPanel pDP = RobotMap.utilsPDP;
    private final DigitalInput lSClimbStop = RobotMap.utilsLSClimbStop;
    private final DigitalInput lSCollectorOut = RobotMap.utilsLSCollectorOut;
    private final DigitalInput lSCollectorIn = RobotMap.utilsLSCollectorIn;
    private final DigitalInput digitialGyro = RobotMap.utilsDigitialGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// Configure encoders
    	encoderDrive1.setPIDSourceType(PIDSourceType.kDisplacement);
 		encoderDrive2.setPIDSourceType(PIDSourceType.kDisplacement);
 		
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void driveEncoderReset(){
    	encoderDrive1.reset();
    	encoderDrive2.reset();
    }
    
    public boolean getStop(){
    	return lSClimbStop.get();
    }
    
    public double distantPerPulse(){
    	double distPP = Constants.wheelDiameterM*Math.PI ;
    	
    	
 					//(4.0/* in */ * Math.PI) / (360.0 * 12.0/* in/ft */));
    	return distPP; 
    } 
	/**
	 * @return The encoder getting the distance and speed of left side of the
	 *         drivetrain.
	 */
	public Encoder getLeftEncoder() {
		return encoderDrive1;
	}

	/**
	 * @return The encoder getting the distance and speed of right side of the
	 *         drivetrain.
	 */
	public Encoder getRightEncoder() {
		return encoderDrive2;
	}


 	

}

