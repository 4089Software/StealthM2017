// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017.subsystems;

import org.usfirst.frc4089.StealthM2017.Constants;
import org.usfirst.frc4089.StealthM2017.RobotMap;
import org.usfirst.frc4089.StealthM2017.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private final RobotDrive robotDrive41 = RobotMap.driveRobotDrive41;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon motorD1 = RobotMap.driveMotorD1;
    private final CANTalon motorD2 = RobotMap.driveMotorD2;
    private final CANTalon motorD3 = RobotMap.driveMotorD3;
    private final CANTalon motorD4 = RobotMap.driveMotorD4;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new UserDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void uDrive(Joystick j){
    	arcDrive(j.getZ(),j.getY());
    }
    public void arcDrive(double turn, double pow){
    	robotDrive41.arcadeDrive(pow, turn);
    	    	
    }
    
    public void driveFW(){
    	robotDrive41.arcadeDrive(Constants.driveFWPow, Constants.driveFWTurn);
    }
    public void driveBW(){
    	robotDrive41.arcadeDrive(Constants.driveBWPow, Constants.driveBWTurn);
    }
    public void driveLT(){
    	robotDrive41.arcadeDrive(Constants.driveLTPow, Constants.driveLTTurn);
    }
    public void driveRT(){
    	robotDrive41.arcadeDrive(Constants.driveRTPow, Constants.driveRTTurn);
    }
    //used to dynamically drive the bot
    public void driveDyn(double dist, double deg){
    	robotDrive41.arcadeDrive(dist, deg);
    }
    public void stop(){
    	robotDrive41.arcadeDrive(0, 0);
    }
    public void tankDrive(double leftAxis, double rightAxis) {
		robotDrive41.tankDrive(leftAxis, rightAxis);
	}
  
}

