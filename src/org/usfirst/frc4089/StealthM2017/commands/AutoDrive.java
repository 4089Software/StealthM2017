// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4089.StealthM2017.Constants;
import org.usfirst.frc4089.StealthM2017.Robot;

/**
 *
 */
public class AutoDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double driveForwardSpeed;
	private double driveForwardTurn;
	private double distance;
	private double distanceLeft;
	private double distanceRight;
	private double error;
	private double errorLeft;
	private double errorRight;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	this(Constants.defaultAutoDriveDist, Constants.defaultAutoDriveMaxSpeed);
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.drive);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    	
    }

    public AutoDrive(double dist) {
    	this(dist, Constants.defaultAutoDriveMaxSpeed);
    }

    public AutoDrive(double dist, double maxSpeed) {
    	requires(Robot.drive);
    	distance = dist;
    	driveForwardSpeed = maxSpeed;
    }
    

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.utils.getLeftEncoder().reset();
    	Robot.utils.getRightEncoder().reset();
    	setTimeout(2);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	errorLeft = distanceLeft - Robot.utils.getLeftEncoder().getDistance();
    	errorRight = distanceRight - Robot.utils.getRightEncoder().getDistance();
    	error = (errorLeft + errorRight)/2;
    	if (driveForwardSpeed * Constants.kP * error >= driveForwardSpeed) {
			Robot.drive.tankDrive(driveForwardSpeed, driveForwardSpeed);
    	
		} else {
			Robot.drive.tankDrive(driveForwardSpeed * Constants.kP * error, driveForwardSpeed * Constants.kP * error);
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (Math.abs(error) <= Constants.kTolerance) || isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
