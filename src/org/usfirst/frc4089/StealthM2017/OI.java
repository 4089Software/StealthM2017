// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017;

import org.usfirst.frc4089.StealthM2017.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton j0B1;
    public JoystickButton j0B4;
    public JoystickButton j0B5;
    public JoystickButton j0B3;
    public JoystickButton j0B2;
    public JoystickButton j0B6;
    public JoystickButton j0B7;
    public JoystickButton j0B8;
    public JoystickButton j0B9;
    public Joystick joystick0;
    public JoystickButton j1B1;
    public JoystickButton j1B2;
    public JoystickButton j1B3;
    public JoystickButton j1B4;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(1);
        
        j1B4 = new JoystickButton(joystick1, 4);
        j1B4.whileHeld(new AgitatorRun());
        j1B3 = new JoystickButton(joystick1, 3);
        j1B3.whenPressed(new LowGoalClose());
        j1B2 = new JoystickButton(joystick1, 2);
        j1B2.whenPressed(new LowGoalOpen());
        j1B1 = new JoystickButton(joystick1, 1);
        j1B1.whenPressed(new LowGoalActuate());
        joystick0 = new Joystick(0);
        
        j0B9 = new JoystickButton(joystick0, 9);
        j0B9.whileHeld(new ClimbLower());
        j0B8 = new JoystickButton(joystick0, 8);
        j0B8.whileHeld(new ClimbRaise());
        j0B7 = new JoystickButton(joystick0, 7);
        j0B7.whileHeld(new ShooterIn());
        j0B6 = new JoystickButton(joystick0, 6);
        j0B6.whileHeld(new ShooterIn());
        j0B2 = new JoystickButton(joystick0, 2);
        j0B2.whileHeld(new CollectorOut());
        j0B3 = new JoystickButton(joystick0, 3);
        j0B3.whileHeld(new CollectorIn());
        j0B5 = new JoystickButton(joystick0, 5);
        j0B5.whileHeld(new ElevRaise());
        j0B4 = new JoystickButton(joystick0, 4);
        j0B4.whileHeld(new ElevLower());
        j0B1 = new JoystickButton(joystick0, 1);
        j0B1.whileHeld(new ShooterRun());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveFW", new DriveFW());
        SmartDashboard.putData("Command Group 1", new CommandGroup1());
        SmartDashboard.putData("DriveBW", new DriveBW());
        SmartDashboard.putData("DriveR", new DriveR());
        SmartDashboard.putData("DriveL", new DriveL());
        SmartDashboard.putData("ElevRaise", new ElevRaise());
        SmartDashboard.putData("ElevLower", new ElevLower());
        SmartDashboard.putData("ShooterRun", new ShooterRun());
        SmartDashboard.putData("ShooterStop", new ShooterStop());
        SmartDashboard.putData("CollectorIn", new CollectorIn());
        SmartDashboard.putData("CollectorOut", new CollectorOut());
        SmartDashboard.putData("ShooterIn", new ShooterIn());
        SmartDashboard.putData("UserDrive", new UserDrive());
        SmartDashboard.putData("ClimbRaise", new ClimbRaise());
        SmartDashboard.putData("ClimbLower", new ClimbLower());
        SmartDashboard.putData("DriveSLT", new DriveSLT());
        SmartDashboard.putData("DriveSRT", new DriveSRT());
        SmartDashboard.putData("ElevTimed", new ElevTimed());
        SmartDashboard.putData("ShooterTimed", new ShooterTimed());
        SmartDashboard.putData("LowGoalOpen", new LowGoalOpen());
        SmartDashboard.putData("LowGoalClose", new LowGoalClose());
        SmartDashboard.putData("LowGoalActuate", new LowGoalActuate());
        SmartDashboard.putData("AgitatorRun", new AgitatorRun());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick0() {
        return joystick0;
    }

    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

