// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.StealthM2017;

import org.usfirst.frc4089.StealthM2017.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton jB1;
    public JoystickButton jB4;
    public JoystickButton jB5;
    public JoystickButton jB3;
    public JoystickButton jB2;
    public JoystickButton jB6;
    public JoystickButton jB7;
    public Joystick joystick0;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(1);
        
        joystick0 = new Joystick(0);
        
        jB7 = new JoystickButton(joystick0, 7);
        jB7.whileHeld(new ShooterIn());
        jB6 = new JoystickButton(joystick0, 6);
        jB6.whileHeld(new ShooterRun());
        jB2 = new JoystickButton(joystick0, 2);
        jB2.whileHeld(new CollectorOut());
        jB3 = new JoystickButton(joystick0, 3);
        jB3.whileHeld(new CollectorIn());
        jB5 = new JoystickButton(joystick0, 5);
        jB5.whileHeld(new ElevRaise());
        jB4 = new JoystickButton(joystick0, 4);
        jB4.whileHeld(new ElevLower());
        jB1 = new JoystickButton(joystick0, 1);
        jB1.whileHeld(new ShooterRun());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveFW", new DriveFW());
        SmartDashboard.putData("Command Group 1", new CommandGroup1());
        SmartDashboard.putData("DriveBW", new DriveBW());
        SmartDashboard.putData("DriveR", new DriveR());
        SmartDashboard.putData("DriveL", new DriveL());
        SmartDashboard.putData("ElevRaise", new ElevRaise());
        SmartDashboard.putData("ElevLower", new ElevLower());
        SmartDashboard.putData("ShooterRun", new ShooterRun());
        SmartDashboard.putData("ShooterStop", new ShooterStop());
        SmartDashboard.putData("CollectorIn", new CollectorIn());
        SmartDashboard.putData("CollectorOut", new CollectorOut());
        SmartDashboard.putData("ShooterIn", new ShooterIn());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick0() {
        return joystick0;
    }

    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

